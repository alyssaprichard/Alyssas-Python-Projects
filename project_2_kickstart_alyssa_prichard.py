# -*- coding: utf-8 -*-
"""Project 2/Kickstart/Alyssa Prichard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NzzXZi1ce1OCEAuaJLTqhC6GGSSxbbAg
"""

#1.0 Importing Packages
import pandas as pd
import numpy as np
from numpy.core.defchararray import index
import matplotlib.pyplot as plt
import io
from plotnine import (
    ggplot, aes,
    geom_col, geom_line,
  geom_smooth,
    facet_wrap,
    scale_y_continuous,
  scale_x_datetime,
    labs,
    theme, theme_minimal,
  theme_matplotlib,
    expand_limits,
    element_text
)
from mizani.breaks import date_breaks
from mizani.formatters import date_format, currency_format
from os import mkdir

#2.0 Uploading and Reading Files
from google.colab import files
uploaded = files.upload()

bikes_df=pd.read_excel("/content/bikes.xlsx")
bikeshops_df=pd.read_excel("/content/bikeshops.xlsx")
orderlines_df=pd.read_excel("/content/orderlines.xlsx")

#3.0 Method Chaining!
top5_bike_series = bikes_df['description'].value_counts().nlargest(5)
top5_bike_series.plot(kind='barh')

#4.0 Merging

bike_orderlines_joined_df = orderlines_df \
.drop(columns='Unnamed: 0') \
.merge(right=bikes_df,
       how='left',
       left_on="product.id",
       right_on='bike.id') \
.merge(right=bikeshops_df,
       how='left',
       left_on="customer.id",
       right_on='bikeshop.id')
bike_orderlines_joined_df.info()

#5.0
b=bikes_df['description']
b.value_counts()

#5.0
k=bikeshops_df['location']
k.value_counts()

#4.0 Separate
#a.three columns category 1 category 2 material
df=bike_orderlines_joined_df
df=bike_orderlines_joined_df.copy()
df['description']
temp_df=df['description'].str.split('-', expand=True)
temp_df
df['Terrain']=temp_df[0]
df['Type']=temp_df[1]
df['Material']=temp_df[2]
print(df)

#b Location into city and state
temp_df=bikeshops_df['location'].str.split(',', expand=True)
df['City']=temp_df[0]
df['State']=temp_df[1]
print(df)

#5.0 Continue Wrangling
#c. Total revenue feature based on price and quantity
df['total_revenue']=df['price']*df['quantity']
#d sort descending
df.sort_values('total_revenue', ascending=False)
#e first 10 orders
first_10_orders=df.head(10)

#f Reorg columns
df.columns
cols_to_keep_list=['order.id',
                   'order.line',
                   'order.date',
                   'customer.id',
                   'product.id',
                   'quantity',
                   'bike.id',
                   'model',
                   'description',
                   'price',
                   'bikeshop.id',
                   'bikeshop.name',
                   'location',
                   'Terrain',
                   'Type',
                   'Material']
df=df[cols_to_keep_list].copy()
df.info()
#g replace column names
df.columns=df.columns.str.replace('.','_')
bike_orderlines_wrangled_df=df

#6.0 Visualize a Time Series
#a directory
mkdir('data_wrangled')
bike_orderlines_wrangled_df=df
#b pickle
bike_orderlines_wrangled_df.to_pickle('data_wrangled/bike_orderlines_wrangled.pkl')
df=pd.read_pickle('data_wrangled/bike_orderlines_wrangled.pkl')
df=pd.DataFrame(df)
df['order_date']
order_date_series=df['order_date']
order_date_series.dt.year
#c aggregate
sales_by_month_df=df[['order_date','total_revenue']]\
.set_index('order_date')\
.resample('M')\
.aggregate(np.sum)\
.reset_index()
sales_by_month_df.plot(x='order_date', y='total_revenue')

#d ggplot
pip install scikit-misc
usd=currency_format(prefix="$", digits=0, big_mark=',')

ggplot(data=sales_by_month_df, mapping=aes(x='order_date', y='total_revenue'))+\
geom_line()+\
geom_smooth(method='lowess', se=False, color='pink', span=0.4)+\
scale_y_continuous(labels=usd)+\
labs(title="Revenue by Month", x="",
     y="Revenue")+\
     theme_minimal()+\
     expand_limits(y=0)

sales_by_type_week=df[['Type',
                       'order_date',
                       'total_revenue']]\
.set_index('order_date')\
.groupby('Type')\
.resample('W')\
.agg(np.sum)\
.drop(columns='Type')\
.reset_index()
#girlypop u forgot to put df before[[]]
df_pivot=sales_by_type_week\
.pivot(
    index='order_date',
    columns='Type',
    values='total_revenue')\
.fillna(0)\
.plot(kind='line',subplots=True,figsize=(10,6))
df.to_pickle('data_wrangled/bike_orderlines_wrangled_df.pkl')
files.download('data_wrangled/bike_orderlines_wrangled_df.pkl')